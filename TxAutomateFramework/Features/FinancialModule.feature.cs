// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TxAutomateFramework.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("FinancialModule")]
    public partial class FinancialModuleFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "FinancialModule.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FinancialModule", "\tThis module covers functionality of financial ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Financials_TC007_Financial_Entry_Monthly_Recurring")]
        [NUnit.Framework.CategoryAttribute("TC007_Financial_Entry_Monthly_Recurring")]
        [NUnit.Framework.TestCaseAttribute("sbusireddy_admin", "Welcome*2018", "Test 004 (004)", "Monthly", "5000", "Payable", "FirstOfEachPeriod", "True", "2500", "Fixed", "12", "Months", "TOTAL BASE RENT", "BASE RENT", "2019", "Test 004", "2500", new string[] {
                "Source:TC007_Financial_Entry_Monthly_Recurring.xlsx:TC007"}, Category="Source:TC007_Financial_Entry_Monthly_Recurring.xlsx:TC007")]
        public virtual void Financials_TC007_Financial_Entry_Monthly_Recurring(
                    string lID, 
                    string password, 
                    string strCategory, 
                    string strFrequency, 
                    string strAmt, 
                    string strFinType, 
                    string strRecordOption, 
                    string bRecurringIncrease, 
                    string strIncAmt, 
                    string strIncType, 
                    string strTimePeriod, 
                    string strTimeFrequency, 
                    string strCategoryName, 
                    string strSubCategoryname, 
                    string strYear, 
                    string strEntryCategoryName, 
                    string strFinEntryAmt, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC007_Financial_Entry_Monthly_Recurring"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Financials_TC007_Financial_Entry_Monthly_Recurring", @__tags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given(string.Format("Login to application {0} and {1}", lID, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.Then("Enter record id in Search box and select the lease", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 8
 testRunner.Then("User clicks on Financial tab and Entries link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 9
 testRunner.Then(string.Format("Click Add Record button and enter valid data for record section {0} and {1} and {" +
                        "2} and {3} and {4}", strCategory, strFrequency, strAmt, strFinType, strRecordOption), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 10
 testRunner.Then(string.Format("Click on Add increases link from planed increase sectionenter valid data {0} and " +
                        "{1} and {2} and {3} and {4}", bRecurringIncrease, strIncAmt, strIncType, strTimePeriod, strTimeFrequency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
 testRunner.Then("Select Calendar link from Finanical sub  menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
 testRunner.And(string.Format("Click on Base Rent and select Date Range as Lease term {0} and {1} and {2}", strCategoryName, strSubCategoryname, strYear), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.Then(string.Format("Validate the system will display Base Rent and its subcategory with the monthly b" +
                        "reakup {0} and {1}", strEntryCategoryName, strFinEntryAmt), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 14
 testRunner.Then("I do logout from application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Financials_TC008_Financial_Entry_Monthly_OneTime")]
        [NUnit.Framework.CategoryAttribute("TC008_Financial_Entry_Monthly_OneTime")]
        [NUnit.Framework.TestCaseAttribute("sbusireddy_admin", "Welcome*2018", "Test 004 (004)", "Monthly", "5000", "Payable", "FirstOfEachPeriod", "False", "2500", "Fixed", "12", "Months", "TOTAL BASE RENT", "BASE RENT", "2019", "Test 004", "2500", new string[] {
                "Source:TC007_Financial_Entry_Monthly_Recurring.xlsx:TC008"}, Category="Source:TC007_Financial_Entry_Monthly_Recurring.xlsx:TC008")]
        public virtual void Financials_TC008_Financial_Entry_Monthly_OneTime(
                    string lID, 
                    string password, 
                    string strCategory, 
                    string strFrequency, 
                    string strAmt, 
                    string strFinType, 
                    string strRecordOption, 
                    string bRecurringIncrease, 
                    string strIncAmt, 
                    string strIncType, 
                    string strTimePeriod, 
                    string strTimeFrequency, 
                    string strCategoryName, 
                    string strSubCategoryname, 
                    string strYear, 
                    string strEntryCategoryName, 
                    string strFinEntryAmt, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TC008_Financial_Entry_Monthly_OneTime"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Financials_TC008_Financial_Entry_Monthly_OneTime", @__tags);
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given(string.Format("Login to application {0} and {1}", lID, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.Then("Enter record id in Search box and select the lease", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 24
 testRunner.Then("User clicks on Financial tab and Entries link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
 testRunner.Then(string.Format("Click Add Record button and enter valid data for record section {0} and {1} and {" +
                        "2} and {3} and {4}", strCategory, strFrequency, strAmt, strFinType, strRecordOption), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
 testRunner.Then(string.Format("Click on Add increases link from planed increase sectionenter valid data {0} and " +
                        "{1} and {2} and {3} and {4}", bRecurringIncrease, strIncAmt, strIncType, strTimePeriod, strTimeFrequency), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 27
 testRunner.Then("Select Calendar link from Finanical sub  menu", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 28
 testRunner.And(string.Format("Click on Base Rent and select Date Range as Lease term {0} and {1} and {2}", strCategoryName, strSubCategoryname, strYear), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.Then(string.Format("Validate the system will display Base Rent and its subcategory with the monthly b" +
                        "reakup {0} and {1}", strEntryCategoryName, strFinEntryAmt), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 30
 testRunner.Then("I do logout from application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
